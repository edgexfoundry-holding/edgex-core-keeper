openapi: 3.1.0
info:
  title: Edgex Foundry - Support Scheduler API
  description: This is the definition of the API for the Support Scheduler service in the EdgeX Foundry IOT microservice platform. Support Scheduler provides functionality for scheduling different actions in the EdgeX Foundry platform.
  version: 3.1.0
  
servers:
  - url: http://localhost:59861/api/v3
    description: URL for local development and testing
  
components:
  schemas:
    AddIntervalRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        interval:
          $ref: '#/components/schemas/Interval'
      required:
      - interval
    AddIntervalResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    AddIntervalActionRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        action:
          $ref: '#/components/schemas/IntervalAction'
      required:
      - action
    AddIntervalActionResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    BaseRequest:
      description: "Defines basic properties which all use-case specific request DTO instances should support."
      type: object
      properties:
        requestId:
          description: "Uniquely identifies this request. For implementation, recommend this value be generated by the type's constructor."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
          example: v3
      required:
        - apiVersion
    BaseResponse:
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
        requestId:
          description: "Uniquely identifies the request that resulted in this response."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
        statusCode:
          description: "A numeric code signifying the operational status of the response."
          type: integer
    BaseWithTotalCountResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        totalCount:
          description: "The total count of all multi instances."
          type: integer
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning a generic error to the caller."
      type: object
      properties:
        message:
          description: "A field that can contain a free-form message, such as an error message."
          type: string      
    ConfigResponse:
      description: "An object containing the service's configuration. Please refer the configuration documentation of each service for more details at [EdgeX Foundry Documentation](https://docs.edgexfoundry.org)."
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
          example: v3
        serviceName:
          description: "Outputs the name of the service the response is from"
          type: string
          example: "support-scheduler"
        config:
          description: "A string-ified representation of the service's configuration. For purposes of this specification, a string has been used since configuration structure differs from service to service."
          type: object
    Interval:
      description: "Defines the interval at which some action should occur."
      type: object
      properties:
        created:
          description: "A timestamp indicating when the interval was created."
          type: integer
        end:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
          example: "20221016T200000"
        interval:
          description: Interval indicates how often the specific resource needs to be polled. It represents as a duration string. The format of this field is to be an unsigned integer followed by a unit which may be "ns", "us" (or "µs"), "ms", "s", "m", "h" representing nanoseconds, microseconds, milliseconds, seconds, minutes or hours. Eg, "100ms", "24h"
          type: string
          example: "100m"
        id:
          description: "Uniquely identifies the interval"
          type: string
          format: uuid
        modified:
          description: "A timestamp indicating when the interval was last modified."
          type: integer
        name:
          description: "Non-database identifier for an interval (*must be unique)"
          type: string
          example: "test interval"
        start:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
          example: "20211016T200000"
      required:
        - name
        - interval
    UpdateInterval:
      description: "Defines the interval at which some action should occur."
      type: object
      properties:
        id:
          description: "Uniquely identifies the interval, either id or name should be specified."
          type: string
          format: uuid
        name:
          description: "Non-database identifier for an interval (*must be unique), either id or name should be specified."
          type: string
        start:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
        end:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
        interval:
          description: Interval indicates how often the specific resource needs to be polled. It represents as a duration string. The format of this field is to be an unsigned integer followed by a unit which may be "ns", "us" (or "µs"), "ms", "s", "m", "h" representing nanoseconds, microseconds, milliseconds, seconds, minutes or hours. Eg, "100ms", "24h"
          type: string
      required:
        - id
        - name
    IntervalAction:
      description: "Defines the action to be taken at a specified interval."
      type: object
      properties:
        created:
          description: "A timestamp indicating when the interval action was created."
          type: integer
        modified:
          description: "A timestamp indicating when the interval action was last modified."
          type: integer
        id:
          description: "Uniquely identifies the interval action"
          type: string
          format: uuid
        name:
          description: "Non-database identifier for an interval action"
          type: string
        intervalName:
          description: "The name of the interval to which the action is associated."
          type: string
        address:
          oneOf:
            - $ref: '#/components/schemas/RESTAddress'
          example:
            type: "REST"
            host: "192.168.0.102"
            port: 8080
            httpMethod: "GET"
            path: "/api/v3/ping"
        content:
          description: "The actual content to be sent as the body"
          type: string
        contentType:
          description: "Indicates which request contentType should be used (i.e. text/html, application/json), the default is application/json"
          type: string
        adminState:
          type: string
          description: Admin state
          enum:
            - LOCKED
            - UNLOCKED
        authmethod:
          type: string
          description: AuthMethod indicates how to authenticate the outbound URL
          enum:
            - NONE
            - JWT
      required:
        - name
        - intervalName
        - address
        - adminState
    UpdateIntervalAction:
      description: "Defines the action to be taken at a specified interval."
      type: object
      properties:
        id:
          description: "Uniquely identifies the interval action, either id or name should be specified."
          type: string
          format: uuid
        name:
          description: "Non-database identifier for an interval action, either id or name should be specified."
          type: string
        intervalName:
          description: "The name of the interval to which the action is associated."
          type: string
        address:
          oneOf:
            - $ref: '#/components/schemas/RESTAddress'
          example:
            type: "REST"
            host: "192.168.0.102"
            port: 8080
            httpMethod: "GET"
            path: "/api/v3/ping"
        content:
          description: "The actual content to be sent as the body"
          type: string
        contentType:
          description: "Indicates which request contentType should be used (i.e. text/html, application/json), the default is application/json"
          type: string
        adminState:
          type: string
          description: Admin state
          enum:
            - LOCKED
            - UNLOCKED
        authmethod:
          type: string
          description: AuthMethod indicates how to authenticate the outbound URL 
          enum:
            - NONE
            - JWT
      required:
        - id
        - name
    IntervalActionResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        action:
          $ref: '#/components/schemas/IntervalAction'
    MultiIntervalActionsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseWithTotalCountResponse'
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/IntervalAction'
    IntervalResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        interval:
          $ref: '#/components/schemas/Interval'
    MultiIntervalsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseWithTotalCountResponse'
      type: object
      properties:
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/Interval'
    PingResponse:
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
          example: v3
        timestamp:
          description: "Outputs the current server timestamp in RFC1123 format"
          example: "Mon, 02 Jan 2006 15:04:05 MST"
          type: string
        serviceName:
          description: "Outputs the name of the service the response is from"
          type: string
    UpdateIntervalRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        interval:
          $ref: '#/components/schemas/UpdateInterval'
      required:
        - interval
    UpdateIntervalResponse:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        id:
          type: string
          format: uuid
    UpdateIntervalActionRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        action:
          $ref: '#/components/schemas/UpdateIntervalAction'
      required:
        - action
    UpdateIntervalActionResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        id:
          type: string
          format: uuid
    Address:
      description: "The address shows the information indicating how to contact a specific endpoint."
      type: object
      properties:
        type:
          description: "Indicates which protocol should be used."
          type: string
          enum:
            - REST
        host:
          description: "The host targeted by the action."
          type: string
        port:
          description: "The port to address on the targeted host."
          type: integer
      required:
        - type
        - host
        - port
    RESTAddress:
      description: "The REST address shows the information indicating how to contact a specific endpoint by HTTP protocol."
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            path:
              description: "The HTTP path at the targeted host for fulfillment of the action."
              type: string
            httpMethod:
              description: "Indicates which Http verb should be used for the REST endpoint."
              type: string
          required:
            - httpMethod
    VersionResponse:
      description: "A response returned from the /version endpoint whose purpose is to report out the latest version supported by the service."
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
          example: v3
        version:
          description: "The latest version supported by the service."
          type: string
        serviceName:
          description: "Outputs the name of the service the response is from"
          type: string
    SecretRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      description: Defines the secret data to be stored
      type: object
      properties:
        secretName:
          description: Specifies the name of the secret
          type: string
          example: "credentials"
        secretData:
          description: A list of the key/value pairs of secret data to store
          type: array
          items:
            $ref: '#/components/schemas/SecretDataKeyValue'
      required:
        - secretName
        - secretData
    SecretDataKeyValue:
      description: Defines a key/value pair of secret data
      type: object
      properties:
        key:
          description: The key to identify the secret data
          type: string
          example: "secret-key"
        value:
          description: The value of the secret data
          type: string
          example: "secret-value"
      required:
        - key
        - value 
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: "The number of items to skip before starting to collect the result set."
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: -1
        default: 20
      description: "The numbers of items to return.  Specify -1 will return all remaining items after offset.  The maximum will be the MaxResultCount as defined in the configuration of service."
    correlatedRequestHeader:
      in: header
      name: X-Correlation-ID
      description: "A unique identifier correlating a request to its associated response, facilitating tracing through being included on requests originating from the initiating request."
      schema:
        type: string
        format: uuid
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
  headers:
    correlatedResponseHeader:
      description: "A response header that returns the unique correlation ID used to initiate the request."
      schema:
        type: string
        format: uuid
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
  examples:
    400Example:
      value:
        apiVersion: "v3"
        statusCode: 400
        message: "Bad Request"
    500Example:
      value:
        apiVersion: "v3"
        statusCode: 500
        message: "Internal Server Error"
    MultiIntervalsExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        totalCount: 3
        intervals:
          - created: 1634279367311
            modified: 1634279367311
            id: "debade10-7838-44bd-9c09-1283813db6c8"
            name: "interval_4"
            start: "20211015T200000"
            end: "20211016T200000"
            interval: "100m"
          - created: 1634279236873
            modified: 1634279236873
            id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            name: "interval_1"
            start: "20211015T200000"
            end: "20211016T200000"
            interval: "100m"
    MultiIntervalActionsExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        totalCount: 3
        actions:
          - created: 1634279367311
            modified: 1634279367311
            id: "debade10-7838-44bd-9c09-1283813db6c8"
            name: "action_2"
            intervalName: "interval_1"
            address:
              type: "REST"
              host: "192.168.0.102"
              port: 8080
              httpMethod: "GET"
              path: "/api/v3/ping"
            adminState: "UNLOCKED"
          - created: 1634280525302
            modified: 1634280525302
            id: "7b9c6908-0929-498d-9f81-c25abdedd93f"
            name: "action_1"
            intervalName: "interval_1"
            address:
              type: "REST"
              host: "192.168.0.102"
              port: 8080
              httpMethod: "GET"
              path: "/api/v3/test"
            adminState: "UNLOCKED"
paths:
  /interval:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      summary: "Add one or more new Intervals - name on each request must be unique."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddIntervalRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/AddIntervalResponse'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: An unexpected error occurred on the server
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    patch:
      summary: "Update one or more existing Intervals"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateIntervalRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/UpdateIntervalResponse'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: An unexpected error occurred on the server
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /interval/all:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of intervals sorted by last modified descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiIntervalsResponse'
              examples:
                MultiIntervalsExample:
                  $ref: '#/components/examples/MultiIntervalsExample'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
  /interval/name/{name}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: "The unique name of an interval"
    get:
      summary: "Returns an interval according to the specified name"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntervalResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: "Deletes an interval according to the specified name. Associated actions will also be deleted."
      responses:
        '200':
          description: "Delete successful"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /intervalaction:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      summary: "Add one or more new IntervalActions - name on each request must be unique."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddIntervalActionRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/AddIntervalActionResponse'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: An unexpected error occurred on the server
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    patch:
      summary: "Update one or more existing IntervalActions"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateIntervalActionRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/UpdateIntervalActionResponse'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: An unexpected error occurred on the server
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /intervalaction/all:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of interval actions sorted by last modified descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiIntervalActionsResponse'
              examples:
                MultiIntervalActionsExample:
                  $ref: '#/components/examples/MultiIntervalActionsExample'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
  /intervalaction/name/{name}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: "The name of an interval action"
    get:
      summary: "Returns an interval action according to the specified name"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntervalActionResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: "Deletes an interval action by name"
      responses:
        '200':
          description: "Delete successful"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /config:
    get:
      summary: "Returns the current configuration of the service."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '500':
          description: "Interval Server Error"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /ping:
    get:
      summary: "A simple 'ping' endpoint that can be used as a service healthcheck"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
              example:
                apiVersion: "v3"
                timestamp: "Mon, 02 Jan 2006 15:04:05 MST"
                serviceName: "support-scheduler"
        '500':
          description: "Interval Server Error"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /version:
    get:
      summary: "A simple 'version' endpoint that will return the current version of the service"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
              example:
                apiVersion: "v3"
                version: 3.1.0
                serviceName: "support-scheduler"
        '500':
          description: "Interval Server Error"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /secret:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      summary: Adds EdgeX Service exclusive secret to the Secret Store
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SecretRequest'
        required: true
      responses:
        '201':
          description: "Created"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                apiVersion: "v3"
                statusCode: 201
        '400':
          description: "Invalid request."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: "An unexpected error happened on the server."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
